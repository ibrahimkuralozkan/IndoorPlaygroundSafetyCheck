// <auto-generated />
using System;
using IndoorPlaygroundSafetyCheck.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IndoorPlaygroundSafetyCheck.Migrations
{
    [DbContext(typeof(SafetyCheckContext))]
    [Migration("20240325134741_fsp_DeleteEmployee")]
    partial class fsp_DeleteEmployee
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.AllOpenErrorsV", b =>
                {
                    b.Property<string>("AnswerNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CardIdent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckDone")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CheckStart")
                        .HasColumnType("datetime");

                    b.Property<int?>("InspectionIdent")
                        .HasColumnType("int");

                    b.Property<int?>("LocationIdent")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StationName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable((string)null);

                    b.ToView("AllOpenErrors_V", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.AverageErrorPerDayV", b =>
                {
                    b.Property<decimal?>("AllErrorsPerDay")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Error1Count")
                        .HasColumnType("int");

                    b.Property<int?>("Error2Count")
                        .HasColumnType("int");

                    b.Property<int?>("Error3Count")
                        .HasColumnType("int");

                    b.Property<decimal?>("Error3PerDay")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("StationIdent")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("TotalDays")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("AverageErrorPerDay_V", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.AverageInspectionPerDayV", b =>
                {
                    b.Property<double?>("AverageInspectionProDay")
                        .HasColumnType("float");

                    b.Property<int>("LocationIdent")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int?>("TotalInspections")
                        .HasColumnType("int");

                    b.ToTable((string)null);

                    b.ToView("AverageInspectionPerDay_V", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.AverageInspectionTimeV", b =>
                {
                    b.Property<int?>("AverageInspectionTime")
                        .HasColumnType("int");

                    b.Property<string>("Station")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable((string)null);

                    b.ToView("AverageInspectionTime_V", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.Employee", b =>
                {
                    b.Property<int>("Ident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ident"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InsertTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InsertedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("RfidUid")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("UpdateTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.HasKey("Ident")
                        .HasName("PK__Employee__177FD81EFDDD6A08");

                    b.ToTable("Employee", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.Inspection", b =>
                {
                    b.Property<int>("Ident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ident"));

                    b.Property<DateTime?>("CheckDone")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CheckStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("InsertTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InsertedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<int>("IsSent")
                        .HasColumnType("int");

                    b.Property<string>("RfidUid")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("Signature")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.HasKey("Ident");

                    b.ToTable("Inspection", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.InspectionQuestionResult", b =>
                {
                    b.Property<int>("Ident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ident"));

                    b.Property<int?>("ErrorType")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InsertedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<int>("InspectionIdent")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StationIdent")
                        .HasColumnType("int");

                    b.Property<int>("StationQuestionIdent")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.HasKey("Ident")
                        .HasName("PK_List");

                    b.HasIndex("InspectionIdent");

                    b.HasIndex("StationQuestionIdent");

                    b.ToTable("InspectionQuestionResult", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.LastInspectionV", b =>
                {
                    b.Property<string>("LastInspection")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StationIdent")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable((string)null);

                    b.ToView("LastInspection_V", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.Message", b =>
                {
                    b.Property<int>("Ident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ident"));

                    b.Property<DateTime>("InsertTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InspectionIdent")
                        .HasColumnType("int");

                    b.Property<int>("InspectionQuestionResultIdent")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PictureData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ReceiverIdent")
                        .HasColumnType("int");

                    b.Property<int>("SenderIdent")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Ident");

                    b.ToTable("Message", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.OpenDefectInspectionsV", b =>
                {
                    b.Property<string>("AnswerNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CardIdent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckDone")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CheckStart")
                        .HasColumnType("datetime");

                    b.Property<int?>("InspectionIdent")
                        .HasColumnType("int");

                    b.Property<int?>("LocationIdent")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StationName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable((string)null);

                    b.ToView("OpenDefectInspections_V", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.QuestionCatalogue", b =>
                {
                    b.Property<int>("Ident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ident"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("InsertTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InsertedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<DateTime>("UpdateTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.HasKey("Ident");

                    b.ToTable("QuestionCatalogue", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.Repair", b =>
                {
                    b.Property<int>("Ident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ident"));

                    b.Property<DateTime>("InsertTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("InsertedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("suser_name()");

                    b.Property<int>("InspectionIdent")
                        .HasColumnType("int");

                    b.Property<int?>("IsRepaired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("RepairDatePlan")
                        .HasColumnType("date");

                    b.Property<DateTime?>("RepairedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StationIdent")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("suser_name()");

                    b.HasKey("Ident");

                    b.HasIndex("StationIdent");

                    b.ToTable("Repair", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.Station", b =>
                {
                    b.Property<int>("Ident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ident"));

                    b.Property<DateTime>("InsertTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InsertedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdateTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.HasKey("Ident");

                    b.ToTable("Station", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.StationQuestion", b =>
                {
                    b.Property<int>("Ident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ident"));

                    b.Property<DateTime>("InsertTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InsertedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<int>("QuestionCatalogueIdent")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StationIdent")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.HasKey("Ident")
                        .HasName("PK_StationQuestion_1");

                    b.HasIndex("QuestionCatalogueIdent");

                    b.HasIndex("StationIdent");

                    b.ToTable("StationQuestion", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.TodaysAllErrorsV", b =>
                {
                    b.Property<int?>("CardIdent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckDone")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CheckStart")
                        .HasColumnType("datetime");

                    b.Property<int?>("ErrorType")
                        .HasColumnType("int");

                    b.Property<int>("InspectionIdent")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuestionIdent")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable((string)null);

                    b.ToView("TodaysAllErrors_V", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.TodaysAllInspectionsV", b =>
                {
                    b.Property<int?>("CardIdent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckDone")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CheckStart")
                        .HasColumnType("datetime");

                    b.Property<int?>("ErrorType")
                        .HasColumnType("int");

                    b.Property<int>("InspectionIdent")
                        .HasColumnType("int");

                    b.Property<int>("LocationIdent")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StationIdent")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable((string)null);

                    b.ToView("TodaysAllInspections_V", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.TodaysDefectStationsV", b =>
                {
                    b.Property<int?>("CardIdent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckDone")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CheckStart")
                        .HasColumnType("datetime");

                    b.Property<int?>("ErrorType")
                        .HasColumnType("int");

                    b.Property<int>("LocationIdent")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("QuestionIdent")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("StationIdent")
                        .HasColumnType("int");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable((string)null);

                    b.ToView("TodaysDefectStations_V", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.Training", b =>
                {
                    b.Property<DateTime>("UpdateTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CommonErrorsImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectSetupImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ident")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ident"));

                    b.Property<DateTime>("InsertTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("InsertedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.Property<int>("StationIdent")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(suser_name())");

                    b.HasKey("UpdateTimeStamp");

                    b.HasIndex("StationIdent");

                    b.ToTable("Training", "SafetyCheck");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.InspectionQuestionResult", b =>
                {
                    b.HasOne("IndoorPlaygroundSafetyCheck.Models.Inspection", "InspectionIdentNavigation")
                        .WithMany("InspectionQuestionResults")
                        .HasForeignKey("InspectionIdent")
                        .IsRequired()
                        .HasConstraintName("FK_List_Inspection");

                    b.HasOne("IndoorPlaygroundSafetyCheck.Models.StationQuestion", "StationQuestionIdentNavigation")
                        .WithMany("InspectionQuestionResults")
                        .HasForeignKey("StationQuestionIdent")
                        .IsRequired()
                        .HasConstraintName("FK_List_StationQuestion");

                    b.Navigation("InspectionIdentNavigation");

                    b.Navigation("StationQuestionIdentNavigation");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.Repair", b =>
                {
                    b.HasOne("IndoorPlaygroundSafetyCheck.Models.Station", "Station")
                        .WithMany("Repairs")
                        .HasForeignKey("StationIdent")
                        .IsRequired()
                        .HasConstraintName("FK_Repair_Station");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.StationQuestion", b =>
                {
                    b.HasOne("IndoorPlaygroundSafetyCheck.Models.QuestionCatalogue", "QuestionCatalogueIdentNavigation")
                        .WithMany("StationQuestions")
                        .HasForeignKey("QuestionCatalogueIdent")
                        .IsRequired()
                        .HasConstraintName("FK_StationQuestion_QuestionCatalogue");

                    b.HasOne("IndoorPlaygroundSafetyCheck.Models.Station", "StationIdentNavigation")
                        .WithMany("StationQuestions")
                        .HasForeignKey("StationIdent")
                        .IsRequired()
                        .HasConstraintName("FK_StationQuestion_Station");

                    b.Navigation("QuestionCatalogueIdentNavigation");

                    b.Navigation("StationIdentNavigation");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.Training", b =>
                {
                    b.HasOne("IndoorPlaygroundSafetyCheck.Models.Station", "StationIdentNavigation")
                        .WithMany("Training")
                        .HasForeignKey("StationIdent")
                        .IsRequired()
                        .HasConstraintName("FK_Training_Station");

                    b.Navigation("StationIdentNavigation");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.Inspection", b =>
                {
                    b.Navigation("InspectionQuestionResults");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.QuestionCatalogue", b =>
                {
                    b.Navigation("StationQuestions");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.Station", b =>
                {
                    b.Navigation("Repairs");

                    b.Navigation("StationQuestions");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("IndoorPlaygroundSafetyCheck.Models.StationQuestion", b =>
                {
                    b.Navigation("InspectionQuestionResults");
                });
#pragma warning restore 612, 618
        }
    }
}
